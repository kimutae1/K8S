#!/bin/bash

# IAM 권한 확인
account_id=$(aws sts get-caller-identity | jq -r '.Account')

if [ "$account_id" != "033240183289" ]; then
    echo "IAM 권한이 없습니다. 스크립트를 종료합니다."
    exit 1
else
    echo "Account ID: $account_id"
fi

#리전 설정 for ECR UPLOAD
if [ "$account_id" = "911781391110" ] || [ "$account_id" = "779626203419" ] || [ "$account_id" = "003072849841" ]; then region_code="ap-northeast-2"; elif [ "$account_id" = "033240183289" ]; then region_code="ap-southeast-1"; fi


DATE=`date +%Y%m%d%H%M`
KUBECTL_URL='https://s3.us-west-2.amazonaws.com/amazon-eks/1.28.2/2023-10-17/bin/linux/amd64/kubectl'

# 도커파일 생성
cat <<EOF > Dockerfile
FROM amazon/aws-cli

RUN yum upgrade && yum install -y jq perl curl git tar  bash-completion 

#사용할 폴더 생성 
RUN mkdir /app
RUN mkdir -p ~/.kube/ ~/.aws

#환경변수 설정 global 에서 설정한 변수를 가져옴
# ENV REGION $region_code
# ENV env $env  
# ENV CLUSTER_ENV $cluster_env

#kubectl 설치
RUN bash -c '\
  cd "\$(mktemp -d)" && \
  curl -O ${KUBECTL_URL} && \
  chmod +x ./kubectl && \
  mkdir -p \$HOME/bin && \
  cp ./kubectl \$HOME/bin/kubectl && \
  export PATH=\$HOME/bin:\$PATH && \
  echo "export PATH=\$HOME/bin:\$PATH" >> ~/.bashrc \
'
#KREW eksctl 설치
RUN bash -c ' \
  cd "\$(mktemp -d)" && \
  OS="\$(uname | tr "[:upper:]" "[:lower:]")" && \
  ARCH="\$(uname -m | sed -e "s/x86_64/amd64/" -e "s/\(arm\)\(64\)\?.*/\1\2/" -e "s/aarch64$/arm64/")" && \
  PLATFORM=$(uname -s)_\$ARCH &&\
  KREW="krew-\${OS}_\${ARCH}" && \
  curl -fsSLO "https://github.com/kubernetes-sigs/krew/releases/latest/download/\${KREW}.tar.gz" && \
  tar zxvf "\${KREW}.tar.gz" && \
  ./"\${KREW}" install krew &&\
  curl -sLO "https://github.com/eksctl-io/eksctl/releases/latest/download/eksctl_\$PLATFORM.tar.gz"&&\
  tar -xzf eksctl_\$PLATFORM.tar.gz -C /tmp && rm eksctl_\$PLATFORM.tar.gz&&\
  mv /tmp/eksctl /usr/local/bin\
'

#편의 설정 alias
ENV PATH="/root/.krew/bin:\${PATH}"
RUN echo 'export PATH="\${KREW_ROOT:-\$HOME/.krew}/bin:\$PATH"' >> /root/.bashrc
RUN echo 'source /usr/share/bash-completion/bash_completion' >> ~/.bashrc
RUN echo 'complete -o default -F __start_kubectl k' >> ~/.bashrc
RUN echo "source <(kubectl completion bash)" >> /root/.bashrc
RUN /root/bin/kubectl krew install ctx
RUN echo "alias k=kubectl"  >> /root/.bashrc
#RUN echo -e "[default]\nregion = \${REGION}" >> ~/.aws/config
RUN echo "alias kubectx='kubectl ctx'"  >> /root/.bashrc
#CMD ["bash"]

# #Cluster 정보 저장
# ENTRYPOINT bash -c 'clusters=\$(aws eks list-clusters --output json --query "clusters[]") && \
#   for cluster_name in \$(echo \$clusters | jq -r ".[]"); do \
#     eksctl utils write-kubeconfig --cluster="\$cluster_name"; \
#   done &&\
# tail -f /dev/null \ 
#   '

#ENTRYPOINT  tail -f /dev/null ##for  POD TEST

EOF

# 도커 빌드
docker build -t devops/goldimage-docker .

#ECR_ENDPOINT=${Account}.dkr.ecr.${region_code}.amazonaws.com/devops/goldimage-docker
ECR_ENDPOINT=public.ecr.aws/j1t6w1m1/ekstools
aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws/j1t6w1m1
#echo $ECR_ENDPOINT
# echo ${region_code}

#도커 TAGS
docker tag devops/goldimage-docker:latest ${ECR_ENDPOINT}:latest
docker tag devops/goldimage-docker:latest ${ECR_ENDPOINT}:${DATE}

#docker ECR push
docker push ${ECR_ENDPOINT}:latest 
docker push ${ECR_ENDPOINT}:${DATE}